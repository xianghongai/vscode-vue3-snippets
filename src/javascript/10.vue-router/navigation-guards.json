{
	"router.beforeEach(to, from), Globally": {
		"prefix": "router-beforeEach",
		"body": [
			"router.beforeEach(async (to, from) => {",
			"  $1",
			"});"
		],
		"description": "Global Before Guards.\n"
	},
	"router.beforeResolve(to, from), Globally": {
		"prefix": "router-beforeResolve",
		"body": [
			"router.beforeResolve(async (to, from) => {",
			"  $1",
			"});"
		],
		"description": "Global Resolve Guards.\n"
	},
	"router.afterEach(to, from, failure), Globally": {
		"prefix": "router-afterEach",
		"body": [
			"router.afterEach((to, from, failure) => {",
			"  $1",
			"});"
		],
		"description": "Global After Guards.\n"
	},
	"route.beforeEnter(to, from), Per-Route": {
		"prefix": "route-beforeEnter",
		"body": [
			"beforeEnter (to, from) {",
			"  $1",
			"},"
		],
		"description": "Per-Route Guard.\n`beforeEnter` guards only trigger when entering the route, they don't trigger when the `params`, `query` or `hash` change e.g. going from '/users/2' to '/users/3' or going from '/users/2#info' to '/users/2#projects'. They are only triggered when navigating from a different route.\nWhen working with nested routes, both parent and child routes can use `beforeEnter`. When placed on a parent route, it won't be triggered when moving between children with that same parent.\n"
	},
	"Options API: beforeRouteEnter(to, from, next), In-Component": {
		"prefix": "option-beforeRouteEnter()",
		"body": [
			"beforeRouteEnter(to, from) {",
			"  $1",
			"},",
			""
		],
		"description": "In-Component Guards.\ncalled before the route that renders this component is confirmed.\ndoes NOT have access to `this` component instance,\nbecause it has not been created yet when this guard is called!\nNote that beforeRouteEnter is the only guard that supports passing a callback to next.\n"
	},
	"Options API: beforeRouteUpdate(to, from), In-Component": {
		"prefix": "option-beforeRouteUpdate()",
		"body": [
			"beforeRouteUpdate(to, from) {",
			"  $1",
			"},",
			""
		],
		"description": "In-Component Guards.\ncalled when the route that renders this component has changed, but this component is reused in the new route.\nFor example, given a route with params `/users/:id`, when we navigate between `/users/1` and `/users/2`,\nthe same `UserDetails` component instance will be reused, and this hook will be called when that happens.\nBecause the component is mounted while this happens, the navigation guard has access to `this` component instance.\n"
	},
	"Options API: beforeRouteLeave(to, from), In-Component": {
		"prefix": "option-beforeRouteLeave()",
		"body": [
			"beforeRouteLeave(to, from) {",
			"  $1",
			"},",
			""
		],
		"description": "In-Component Guards.\ncalled when the route that renders this component is about to be navigated away from.\nAs with `beforeRouteUpdate`, it has access to `this` component instance.\n"
	},
	"Composition API: onBeforeRouteUpdate(to, from), In-Component": {
		"prefix": "onBeforeRouteUpdate",
		"body": [
			"onBeforeRouteUpdate(async (to, from) => {",
			"  $1",
			"});"
		]
	},
	"Composition API: onBeforeRouteLeave(to, from), In-Component": {
		"prefix": "onBeforeRouteLeave",
		"body": [
			"onBeforeRouteLeave(async (to, from) => {",
			"  $1",
			"});"
		]
	}
}
