{
	"Options API: beforeCreate()": {
		"prefix": [
			"option-beforeCreate()",
			"olbc"
		],
		"body": [
			"beforeCreate() {",
			"  $1",
			"},$0"
		],
		"description": "Options API: Lifecycle Hooks.\nCalled when the instance is initialized.\n"
	},
	"Options API: created()": {
		"prefix": [
			"option-created()",
			"olc"
		],
		"body": [
			"created() {",
			"  $1",
			"},$0"
		],
		"description": "Options API: Lifecycle Hooks.\nCalled after the instance has finished processing all state-related options.\n"
	},
	"Options API: beforeMount()": {
		"prefix": [
			"option-beforeMount()",
			"olbm"
		],
		"body": [
			"beforeMount() {",
			"  $1",
			"},$0"
		],
		"description": "Options API: Lifecycle Hooks.\nCalled right before the component is to be mounted.\n"
	},
	"Options API: mounted()": {
		"prefix": [
			"option-mounted()",
			"olm"
		],
		"body": [
			"mounted() {",
			"  $1",
			"},$0"
		],
		"description": "Options API: Lifecycle Hooks.\nCalled after the component has been mounted.\n"
	},
	"Options API: beforeUpdate()": {
		"prefix": [
			"option-beforeUpdate()",
			"olbu"
		],
		"body": [
			"beforeUpdate() {",
			"  $1",
			"},$0"
		],
		"description": "Options API: Lifecycle Hooks.\nCalled right before the component is about to update its DOM tree due to a reactive state change.\n"
	},
	"Options API: updated()": {
		"prefix": [
			"option-updated()",
			"olu"
		],
		"body": [
			"updated() {",
			"  $1",
			"},$0"
		],
		"description": "Options API: Lifecycle Hooks.\nCalled after the component has updated its DOM tree due to a reactive state change.\n"
	},
	"Options API: activated()": {
		"prefix": [
			"option-activated()",
			"ola"
		],
		"body": [
			"activated() {",
			"  $1",
			"},$0"
		],
		"description": "Options API: Lifecycle Hooks.\nCalled after the component instance is inserted into the DOM as part of a tree cached by `<KeepAlive>`.\n"
	},
	"Options API: deactivated()": {
		"prefix": [
			"option-deactivated()",
			"olda"
		],
		"body": [
			"deactivated() {",
			"  $1",
			"},$0"
		],
		"description": "Options API: Lifecycle Hooks.\nCalled after the component instance is removed from the DOM as part of a tree cached by `<KeepAlive>`.\n"
	},
	"Options API: beforeUnmount()": {
		"prefix": [
			"option-beforeUnmount()",
			"olbum"
		],
		"body": [
			"beforeUnmount() {",
			"  $1",
			"},$0"
		],
		"description": "Options API: Lifecycle Hooks.\nCalled right before a component instance is to be unmounted.\n"
	},
	"Options API: unmounted()": {
		"prefix": [
			"option-unmounted()",
			"olum"
		],
		"body": [
			"unmounted() {",
			"  $1",
			"},$0"
		],
		"description": "Options API: Lifecycle Hooks.\nCalled after the component has been unmounted.\n"
	},
	"Options API: errorCaptured()": {
		"prefix": "option-errorCaptured()",
		"body": [
			"errorCaptured(err, vm, info) {",
			"  $1",
			"},$0"
		],
		"description": "Options API: Lifecycle Hooks.\nCalled when an error propagating from a descendant component has been captured.\n"
	},
	"Options API: renderTracked(DebuggerEvent)": {
		"prefix": "option-renderTracked()",
		"body": [
			"renderTracked({ key, target, type }) {",
			"  $1",
			"},$0"
		],
		"description": "Dev only.\nOptions API: Lifecycle Hooks.\nCalled when a reactive dependency has been tracked by the component's render effect.\n"
	},
	"Options API: renderTriggered(DebuggerEvent)": {
		"prefix": "option-renderTriggered()",
		"body": [
			"renderTriggered({ key, target, type }) {",
			"  $1",
			"},$0"
		],
		"description": "Dev only.\nOptions API: Lifecycle Hooks.\nCalled when a reactive dependency triggers the component's render effect to be re-run.\n"
	},
	"Options API: serverPrefetch()": {
		"prefix": "option-serverPrefetch()",
		"body": [
			"async serverPrefetch() {",
			"  $1",
			"},$0"
		],
		"description": "Async function to be resolved before the component instance is to be rendered on the server.\n"
	},
	"Options API: async created()": {
		"prefix": "async-option-created()",
		"body": [
			"async created() {",
			"  $1",
			"},$0"
		]
	},
	"Options API: async mounted()": {
		"prefix": "async-option-mounted()",
		"body": [
			"async mounted() {",
			"  $1",
			"},$0"
		]
	}
}
